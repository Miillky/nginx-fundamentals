user www-data;

events {
    worker_connections 1024;
}

http {
	include mime.types;

    # Configure microcache (fastcgi)
    # Directory to store cache and split directories in 2 levels
    # 1 -> directory name for last character of cache
    # 2 -> directory name for last two characters after the first character
    # Example: cache name 30ea56f1e9fd583e5b5f4afcd3194132
    # 1 -> 2 (last number of cache name)
    # 2 -> 13 (last two characters after first character of cache name)
    # key_zones -> name of the cache and how much MB
    # inactive (optional)-> how long to keep cache after last time active
    fastcgi_cache_path /tmp/nginx_cache levels=1:2; keys_zone=ZONE_1:100m inactive=60m

    # Create cache entries by cache key string (md5 hashed)
    # $scheme -> https://
    # $request -> GET
    # $host -> domain.com
    # $request_uri -> /blog/article
    fastcgi_cache_key "$scheme$request$host$request_uri";

    # X naming convention for custom headers
    # $upstream_cache_status -> returns if is hit by cache
    add_header X-Cache $upstream_cache_status;

	server {
		
		listen 80;
		server_name site1.com;
		
		root /home/sites/demo;

		index index.php index.html;

        # Cache conditions

        # Cahe by default
        set $no_cache 0;

        # Check for cache bypass
        # $arg_skipcache -> site1.com/?skipcache=1
        if ($arg_skipache = 1) {
            set $no_cache 1;
        }

		location / {
			try_files $uri $uri/ =404;
		}		

		location ~\.php$ {
			# Pass php requests to the php-fpm service (fastcgi)
			include fastcgi.conf;
			fastcgi_pass unix:/run/php/php7.4-fpm.sock;

            # Enable cache
            fastcgi_cache ZONE_1;

            # Valid cache for 60 min on response statuses
            fastcgi_cache_valid 200 404 60;
            # OR
            fastcgi_cache_valid 200 60;
            fastcgi_cache_valid 404 10;

            fastcgi_cache_bypass $no_cache;
            fastcgi_no_cache $no_cache;
		}
	}
}
